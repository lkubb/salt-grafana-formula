.. _readme:

Grafana Formula
===============

|img_sr| |img_pc|

.. |img_sr| image:: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg
   :alt: Semantic Release
   :scale: 100%
   :target: https://github.com/semantic-release/semantic-release
.. |img_pc| image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white
   :alt: pre-commit
   :scale: 100%
   :target: https://github.com/pre-commit/pre-commit

Manage Grafana with Salt.

.. contents:: **Table of Contents**
   :depth: 1

General notes
-------------

See the full `SaltStack Formulas installation and usage instructions
<https://docs.saltproject.io/en/latest/topics/development/conventions/formulas.html>`_.

If you are interested in writing or contributing to formulas, please pay attention to the `Writing Formula Section
<https://docs.saltproject.io/en/latest/topics/development/conventions/formulas.html#writing-formulas>`_.

If you want to use this formula, please pay attention to the ``FORMULA`` file and/or ``git tag``,
which contains the currently released version. This formula is versioned according to `Semantic Versioning <http://semver.org/>`_.

See `Formula Versioning Section <https://docs.saltproject.io/en/latest/topics/development/conventions/formulas.html#versioning>`_ for more details.

If you need (non-default) configuration, please refer to:

- `how to configure the formula with map.jinja <map.jinja.rst>`_
- the ``pillar.example`` file
- the `Special notes`_ section

Special notes
-------------


Configuration
-------------
An example pillar is provided, please see `pillar.example`. Note that you do not need to specify everything by pillar. Often, it's much easier and less resource-heavy to use the ``parameters/<grain>/<value>.yaml`` files for non-sensitive settings. The underlying logic is explained in `map.jinja`.


Available states
----------------

The following states are found in this formula:

.. contents::
   :local:


``grafana``
^^^^^^^^^^^
*Meta-state*.

This installs the grafana package + mandatory service override,
manages the grafana configuration file,
generates a TLS certificate and key
and then starts the associated grafana service.


``grafana.package``
^^^^^^^^^^^^^^^^^^^
Installs the grafana package and a necessary service override
to include custom secrets via an env vars file.


``grafana.package.repo``
^^^^^^^^^^^^^^^^^^^^^^^^
This state will install the configured grafana repository.
This works for apt/dnf/yum/zypper-based distributions only by default.


``grafana.config``
^^^^^^^^^^^^^^^^^^
Manages the grafana service configuration, including provisioning files and environment secrets.
Has a dependency on `grafana.package`_.


``grafana.cert``
^^^^^^^^^^^^^^^^
Generates a TLS certificate and key.
Depends on `grafana.config`_.


``grafana.service``
^^^^^^^^^^^^^^^^^^^
Starts the grafana service and enables it at boot time.
Has a dependency on `grafana.config`_ and `grafana.cert`_.


``grafana.clean``
^^^^^^^^^^^^^^^^^
*Meta-state*.

Undoes everything performed in the ``grafana`` meta-state
in reverse order, i.e.
stops the service,
removes the TLS certificate and key,
removes the configuration file and then
uninstalls the package + service override.


``grafana.package.clean``
^^^^^^^^^^^^^^^^^^^^^^^^^
Removes the Grafana and the service unit overrides.
Has a dependency on `grafana.config.clean`_.


``grafana.package.repo.clean``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This state will remove the configured grafana repository.
This works for apt/dnf/yum/zypper-based distributions only by default.


``grafana.config.clean``
^^^^^^^^^^^^^^^^^^^^^^^^
Removes the Grafana configuration, including provisioning files,
the env file containing secrets and cached autogenerated secrets.
Has a dependency on `grafana.service.clean`_.


``grafana.cert.clean``
^^^^^^^^^^^^^^^^^^^^^^
Removes the generated TLS certificate/key.
Depends on `grafana.service.clean`_.


``grafana.service.clean``
^^^^^^^^^^^^^^^^^^^^^^^^^
Stops the grafana service and disables it at boot time.



Contributing to this repo
-------------------------

Commit messages
^^^^^^^^^^^^^^^

**Commit message formatting is significant!**

Please see `How to contribute <https://github.com/saltstack-formulas/.github/blob/master/CONTRIBUTING.rst>`_ for more details.

pre-commit
^^^^^^^^^^

`pre-commit <https://pre-commit.com/>`_ is configured for this formula, which you may optionally use to ease the steps involved in submitting your changes.
First install  the ``pre-commit`` package manager using the appropriate `method <https://pre-commit.com/#installation>`_, then run ``bin/install-hooks`` and
now ``pre-commit`` will run automatically on each ``git commit``. ::

  $ bin/install-hooks
  pre-commit installed at .git/hooks/pre-commit
  pre-commit installed at .git/hooks/commit-msg

State documentation
~~~~~~~~~~~~~~~~~~~
There is a script that semi-autodocuments available states: ``bin/slsdoc``.

If a ``.sls`` file begins with a Jinja comment, it will dump that into the docs. It can be configured differently depending on the formula. See the script source code for details currently.

This means if you feel a state should be documented, make sure to write a comment explaining it.
